# -*- coding: utf-8 -*-
"""pr-milestone1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1srAmloiHXcvYePAPyDsbYGa7erTI1hP-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn import preprocessing
from numpy import nan
import seaborn as sns
from sklearn.impute import KNNImputer
import matplotlib.pyplot as plt

pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

def PreProcessing(name):
    df = pd.read_csv(name)
    df.rename(columns={'X1': 'Item_ID','X2': 'Item_Weight','X3':'Item_Fat_Amount','X4':'Item_Store_Allocation','X5':'Item_Category','X6':'Item_Price','X7':'Store_ID','X8':'Store_Establishment_Year','X9':'Store_Size','X10':'Store_Location_Type','X11':'Store_Type'}, inplace=True)
    '''
    Outlet_Size_pivot = \
    df.pivot_table(index='Store_Type', values="Y", aggfunc=np.median)
    Outlet_Size_pivot.plot(kind='bar',figsize=(9,5))
    plt.xlabel("Item Store Allocation")
    plt.ylabel("Sales")
    plt.title("Impact of Store Size on Item Sales")
    plt.xticks(rotation=0)
    plt.show()
    
    
    #This scatter plot show the variation of Item MRP vs Item Sales using scatter plot
    sns.scatterplot(x = df['Item_Price'], y = df['Y'])
    # plt.xlabel('Item_MRP')
    # plt.ylabel('Item_Outlet_Sales')
    plt.title("Impact of Item Price on Item Sales")
    plt.show()
      '''
    df.describe()
    
    df.replace(to_replace ="LF",value ="Low Fat",inplace=True)
    df.replace(to_replace ="low fat",value ="Low Fat",inplace=True)
    df.replace(to_replace ="reg",value ="Regular",inplace=True)
    
    
    
    
    df['Item_Weight'].fillna(method ='bfill', inplace = True)


    df['Item_Store_Allocation']=df['Item_Store_Allocation'].replace(0,nan)
    df['Item_Store_Allocation'].fillna(method ='bfill', inplace = True)

    
    df['Store_Size'].fillna(method ='bfill', inplace = True)
    
    
    label_encoder=preprocessing.LabelEncoder()
    
    columns=['Store_Size','Store_Location_Type','Store_Type']

    for i in columns:
        df[i]=label_encoder.fit_transform(df[i])
  
    DroppedColumns=['Item_Weight','Item_ID','Store_ID','Item_Fat_Amount','Item_Category','Store_Establishment_Year']

    
    Norm_Columns=['Item_Price','Item_Store_Allocation','Store_Size','Store_Location_Type','Store_Type']
    X=df[Norm_Columns]
    norm=MinMaxScaler().fit(X)
    df[Norm_Columns]=norm.transform(df[Norm_Columns])
    corrmat = df.corr()
    f,ax = plt.subplots(figsize = (15,10))
    sns.heatmap(corrmat,annot=True,ax=ax,cmap="YlGnBu",linewidths=0.1,fmt=".2f",square=True)
    plt.show()
    df=df.drop(columns=DroppedColumns)

    return df

from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
df=PreProcessing('../input/pr-21-competition-regression/train.csv')
df.head()
y = df['Y'].values
x=df.drop(columns=['Y'])
x_test=PreProcessing('../input/pr-21-competition-regression/test.csv')

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,random_state=2)




from sklearn.ensemble import GradientBoostingRegressor
model = GradientBoostingRegressor(n_estimators=100,learning_rate=0.1,max_depth=3,min_samples_leaf=100,subsample=0.7,alpha=0.9)
model.fit(X_train,Y_train)
pred=model.predict(X_test)
Test_Pred=model.predict(x_test)
pd.DataFrame(Test_Pred, columns=['Y']).to_csv('final2.csv')
print(mean_absolute_error(pred,Y_test))
