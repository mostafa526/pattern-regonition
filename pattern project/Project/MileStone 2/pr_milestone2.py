# -*- coding: utf-8 -*-
"""pr-milestone2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oHl_XYtpXYX8NvkxwIiYznHV857UxkRT
"""

# -*- coding: utf-8 -*-
"""testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
        https://colab.research.google.com/drive/1mnyMYJrUjG3rH113VvqQoL70t3mAY8o9
    """

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn import preprocessing
from numpy import nan
import seaborn as sns
from sklearn.impute import KNNImputer


pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

def PreProcessing(name):
    df = pd.read_csv(name)
    df.rename(columns={'X1': 'Item_ID','X2': 'Item_Weight','X3':'Item_Fat_Amount','X4':'Item_Store_Allocation','X5':'Item_Category','X6':'Item_Price','X7':'Store_ID','X8':'Store_Establishment_Year','X9':'Store_Size','X10':'Store_Type'}, inplace=True)
    
    
    '''
    sns.countplot(df.Store_Type)
    plt.xticks(rotation=90)
    
    
    sns.countplot(df.Store_Establishment_Year)
    plt.xticks(rotation=90)
    '''
    
    sns.countplot(df.Store_Size)
    plt.xticks(rotation=90)
        
    
    

   
    '''
    corrmat = df.corr()
    f,ax = plt.subplots(figsize = (15,10))
    sns.heatmap(corrmat,annot=True,ax=ax,cmap="YlGnBu",linewidths=0.1,fmt=".2f",square=True)
    '''
    
    df.replace(to_replace ="LF",value ="Low Fat",inplace=True)
    df.replace(to_replace ="low fat",value ="Low Fat",inplace=True)
    df.replace(to_replace ="reg",value ="Regular",inplace=True)
    
    
    df['Item_Weight'].fillna(method ='bfill', inplace = True)
  
   
    df['Item_Store_Allocation']=df['Item_Store_Allocation'].replace(0,nan)
    df['Item_Store_Allocation'].fillna(method ='bfill', inplace = True)

    
    df['Store_Size'].fillna(method ='bfill', inplace = True)
    
    label_encoder=preprocessing.LabelEncoder()
    
    columns=['Store_Size','Store_Type','Item_Category','Item_Fat_Amount','Store_ID']

    for i in columns:
        df[i]=label_encoder.fit_transform(df[i])
    
    '''
    corrmat = df.corr()
    f,ax = plt.subplots(figsize = (15,10))
    sns.heatmap(corrmat,annot=True,ax=ax,cmap="YlGnBu",linewidths=0.1,fmt=".2f",square=True)
    '''
    
    DroppedColumns=['Item_ID','Item_Price','Item_Category','Item_Fat_Amount','Item_Weight','Item_Store_Allocation']
    

    
    Norm_Columns=['Store_Establishment_Year','Item_Price','Item_Store_Allocation','Store_Size','Store_Type','Item_Category']
    X=df[Norm_Columns]
    norm=MinMaxScaler().fit(X)
    df[Norm_Columns]=norm.transform(df[Norm_Columns])


    
    df=df.drop(columns=DroppedColumns)
    '''
    corrmat = df.corr()
    f,ax = plt.subplots(figsize = (15,10))
    sns.heatmap(corrmat,annot=True,ax=ax,cmap="YlGnBu",linewidths=0.1,fmt=".2f",square=True)
    '''
    

    return df


from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.svm import SVC
df=PreProcessing('../input/pr-21-competition-classification/train.csv')




y=df['Y'].values
x=df.drop(columns=['Y'])
from sklearn.linear_model import LinearRegression
from sklearn import metrics

x_test=PreProcessing('../input/pr-21-competition-classification/test.csv')

X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.2,random_state=0)

"""### SVC"""

model=SVC()
model=model.fit(X_train,Y_train)
dictionary ={'Predict': model.predict(X_test), 'Actual': Y_test} 
#frames = [model.predict(X_test), Y_test]
result = pd.DataFrame(dictionary)
print(result)


print("Accuracy:",metrics.accuracy_score(Y_test, model.predict(X_test)))
Test_Pred=model.predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('predictio0.csv')
plot=pd.DataFrame()
plot['Target']=Y_test
plot['Predictions']=y_pred

sns.lmplot('Target','Predictions',data=plot,height=6,aspect=2,line_kws={'color':'green'},scatter_kws={'alpha':0.4,'color':'blue'})
plt.title('SVC \n Accuracy: {0:.2f}%'.format(metrics.accuracy_score(Y_test, model.predict(X_test))*100),size=25)
#%%

model_List=[]

for Kernel in ('linear','poly','rbf'):
    model=SVC(kernel=Kernel,gamma=2)
    model.fit(X_train,Y_train)
    model_List.append(model)
    
for model in model_List:
    print("Accuracy:",metrics.accuracy_score(Y_test, model.predict(X_test)))

Test_Pred=model_List[0].predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('predictio1.csv')
    
Test_Pred=model_List[1].predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('predictio2.csv')
    
    
Test_Pred=model_List[2].predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('predictio3.csv')

"""### KNN"""

from sklearn.neighbors import KNeighborsClassifier
k = KNeighborsClassifier(n_neighbors = 5).fit(X_train, Y_train)
y_pred = k.predict(X_test)
test_score = metrics.accuracy_score(Y_test, k.predict(X_test)) 
print(test_score)
Test_Pred=k.predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('KNN.csv')

plot=pd.DataFrame()
plot['Target']=Y_test
plot['Predictions']=y_pred

sns.lmplot('Target','Predictions',data=plot,height=6,aspect=2,line_kws={'color':'green'},scatter_kws={'alpha':0.4,'color':'blue'})
plt.title('KNN \n Accuracy: {0:.2f}%'.format(metrics.accuracy_score(Y_test, k.predict(X_test))*100),size=25)
#%%

"""### Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier()
clf = clf.fit(X_train,Y_train)
test_score = metrics.accuracy_score(Y_test, clf.predict(X_test)) 
print(test_score)
Test_Pred=clf.predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('DecisionTree.csv')


plot=pd.DataFrame()
plot['Target']=Y_test
plot['Predictions']=y_pred

sns.lmplot('Target','Predictions',data=plot,height=6,aspect=2,line_kws={'color':'green'},scatter_kws={'alpha':0.4,'color':'blue'})
plt.title('Decision Tree \n Accuracy: {0:.2f}%'.format(metrics.accuracy_score(Y_test, clf.predict(X_test))*100),size=25)
#%%

"""### 3amo Naive"""

from sklearn.naive_bayes import GaussianNB

gnb = GaussianNB()

#Train the model using the training sets
gnb.fit(X_train, Y_train)

#Predict the response for test dataset
y_pred = gnb.predict(X_test)

test_score = metrics.accuracy_score(Y_test, y_pred) 
print(test_score)
plot=pd.DataFrame()
plot['Target']=Y_test
plot['Predictions']=y_pred

sns.lmplot('Target','Predictions',data=plot,height=6,aspect=2,line_kws={'color':'green'},scatter_kws={'alpha':0.4,'color':'blue'})
plt.title('Naive Bayes \n Accuracy: {0:.2f}%'.format(metrics.accuracy_score(Y_test, gnb.predict(X_test))*100),size=25)
#%%

"""### XGBOOSTER"""

import xgboost as xgb
model=xgb.XGBClassifier(use_labelencoder=False)
model.fit(X_train, Y_train)
y_pred=model.predict(X_test)
test_score = metrics.accuracy_score(Y_test, y_pred) 
print(test_score)
Test_Pred=model.predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('XGBooster2.csv')

plot=pd.DataFrame()
plot['Target']=Y_test
plot['Predictions']=y_pred

sns.lmplot('Target','Predictions',data=plot,height=6,aspect=2,line_kws={'color':'green'},scatter_kws={'alpha':0.4,'color':'blue'})
plt.title('XGBooster \n Accuracy: {0:.2f}%'.format(metrics.accuracy_score(Y_test, model.predict(X_test))*100),size=25)
#%%

"""### Logistic Regression"""

from sklearn.linear_model import LogisticRegression
MyLogistic=LogisticRegression()
MyLogistic.fit(X_train, Y_train)
y_pred=MyLogistic.predict(X_test)
test_score = metrics.accuracy_score(Y_test, y_pred)
print(test_score)
Test_Pred=model.predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('Logistic Regression.csv')


plot=pd.DataFrame()
plot['Target']=Y_test
plot['Predictions']=y_pred

sns.lmplot('Target','Predictions',data=plot,height=6,aspect=2,line_kws={'color':'green'},scatter_kws={'alpha':0.4,'color':'blue'})
plt.title('Logistic Regression \n Accuracy: {0:.2f}%'.format(metrics.accuracy_score(Y_test, MyLogistic.predict(X_test))*100),size=25)
#%%

"""### RandomForest Regresson"""

from sklearn.ensemble import RandomForestRegressor
RandomForest=RandomForestRegressor()
RandomForest.fit(X_train, Y_train)
y_pred=RandomForest.predict(X_test)
test_score = metrics.accuracy_score(Y_test, y_pred)
print(test_score)
Test_Pred=RandomForest.predict(x_test)
pd.DataFrame(Test_Pred, columns=['label']).to_csv('RandomForest.csv')


plot=pd.DataFrame()
plot['Target']=Y_test
plot['Predictions']=y_pred

sns.lmplot('Target','Predictions',data=plot,height=6,aspect=2,line_kws={'color':'green'},scatter_kws={'alpha':0.4,'color':'blue'})
plt.title('Random Forest Regression \n Accuracy: {0:.2f}%'.format(metrics.accuracy_score(Y_test, RandomForest.predict(X_test))*100),size=25)
#%%